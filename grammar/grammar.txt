id int_const char_const real_const string_const enumeration_const

translation_unit	: external_decl
			| translation_unit external_decl
			;
external_decl		: function_definition
			| decl
			;        
function_definition	: spec_qualifier_list declarator compound_stat
			;
decl			: decl_specs declarator_list ';'
			| decl_specs                 ';'
			;
decl_list		: decl
			| decl_list decl
			;
decl_specs		: storage_class_spec decl_specs
			| storage_class_spec
			| type_spec decl_specs
			| type_spec
			| type_qualifier decl_specs
			| type_qualifier
			;
storage_class_spec	: 'static' | 'typedef'
			;
type_spec		: 'void' | 'char' | 'int' | 'float'
			| struct_spec
			| enum_spec
			| typedef_name
			;
type_qualifier		: 'const'
			;
struct_spec		: 'struct' id '{' struct_decl_list '}'
			| 'struct'    '{' struct_decl_list '}'
			| 'struct' id
			;
struct_decl_list	: struct_decl
			| struct_decl_list struct_decl
			;
struct_decl		: spec_qualifier_list declarator_list ';'
			;
spec_qualifier_list	: type_spec spec_qualifier_list
			| type_spec
			| type_qualifier spec_qualifier_list
			| type_qualifier
			;
enum_spec		: 'enum' id '{' enumerator_list '}'
			| 'enum'    '{' enumerator_list '}'
			| 'enum' id
			;
enumerator_list		: enumerator
			| enumerator_list ',' enumerator
			;
enumerator		: id
			;
declarator_list		: declarator
			| declarator_list ',' declarator
			;
declarator		: pointer direct_declarator
			|	  direct_declarator
			;
direct_declarator	: id
			| '(' declarator ')'
			| direct_declarator '[' const_exp ']'
			| direct_declarator '['		  ']'
			| direct_declarator '(' param_list ')'
			;
pointer			: '*' type_qualifier_list
			| '*'
			| '*' type_qualifier_list pointer
			| '*'			  pointer
			;
type_qualifier_list	: type_qualifier
			| type_qualifier_list type_qualifier
			;
param_list		: param_decl
			| param_list ',' param_decl
			;
param_decl		: spec_qualifier_list declarator
			| spec_qualifier_list abstract_declarator
			| spec_qualifier_list
			;
abstract_declarator	: pointer
			| pointer direct_abstract_declarator
			|	  direct_abstract_declarator
			;
direct_abstract_declarator: '(' abstract_declarator ')'
			| direct_abstract_declarator '[' const_exp ']'
			|			     '[' const_exp ']'
			| direct_abstract_declarator '['           ']'
			|			     '['	   ']'
			| direct_abstract_declarator '(' param_list ')'
			|			     '(' param_list ')'
			;
typedef_name		: id
			;
stat			: exp_stat
			| compound_stat
			| selection_stat
			| iteration_stat
			| jump_stat
			;
exp_stat		: exp ';'
			|     ';'
			;
compound_stat		: '{' decl_list stat_list '}'
			| '{'		stat_list '}'
			| '{' decl_list	          '}'
			| '{'			  '}'
			;
stat_list		: stat
			| stat_list stat
			;
selection_stat		: 'if' '(' exp ')' stat
			| 'if' '(' exp ')' stat 'else' stat
			;
iteration_stat		: 'while' '(' exp ')' stat
			| 'do' stat 'while' '(' exp ')' ';'
			| 'for' '(' exp ';' exp ';' exp ')' stat
			| 'for' '(' exp ';' exp ';'	')' stat
			| 'for' '(' exp ';'	';' exp ')' stat
			| 'for' '(' exp ';'	';'	')' stat
			| 'for' '('	';' exp ';' exp ')' stat
			| 'for' '('	';' exp ';'	')' stat
			| 'for' '('	';'	';' exp ')' stat
			| 'for' '('	';'	';'	')' stat
			;
jump_stat		: 'continue'   ';'
			| 'break'      ';'
			| 'return' exp ';'
			| 'return'     ';'
			;
exp			: assignment_exp
			| exp ',' assignment_exp
			;
assignment_exp		: conditional_exp
			| unary_exp assignment_operator assignment_exp
			;
assignment_operator	: '=' | '*=' | '/=' | '%=' | '+=' | '-=' | '<<='
			| '>>=' | '&=' | '^=' | '|='
			;
conditional_exp		: logical_or_exp
			| logical_or_exp '?' exp ':' conditional_exp
			;
const_exp		: conditional_exp
			;
logical_or_exp		: logical_and_exp
			| logical_or_exp '||' logical_and_exp
			;
logical_and_exp		: inclusive_or_exp
			| logical_and_exp '&&' inclusive_or_exp
			;
inclusive_or_exp	: exclusive_or_exp
			| inclusive_or_exp '|' exclusive_or_exp
			;
exclusive_or_exp	: and_exp
			| exclusive_or_exp '^' and_exp
			;
and_exp			: equality_exp
			| and_exp '&' equality_exp
			;
equality_exp		: relational_exp
			| equality_exp '==' relational_exp
			| equality_exp '!=' relational_exp
			;
relational_exp		: shift_expression
			| relational_exp '<' shift_expression
			| relational_exp '>' shift_expression
			| relational_exp '<=' shift_expression
			| relational_exp '>=' shift_expression
			;
shift_expression	: additive_exp
			| shift_expression '<<' additive_exp
			| shift_expression '>>' additive_exp
			;
additive_exp		: mult_exp
			| additive_exp '+' mult_exp
			| additive_exp '-' mult_exp
			;
mult_exp		: unary_exp
			| mult_exp '*' unary_exp
			| mult_exp '/' unary_exp
			| mult_exp '%' unary_exp
			;
unary_exp		: postfix_exp
			| '++' unary_exp
			| '--' unary_exp
			| unary_operator unary_exp
			;
unary_operator		: '&' | '*' | '+' | '-' | '~' | '!'
			;
postfix_exp		: primary_exp
			| postfix_exp '[' exp ']'
			| postfix_exp '(' argument_exp_list ')'
			| postfix_exp '('	            ')'
			| postfix_exp '.' id
			| postfix_exp '->' id
			| postfix_exp '++'
			| postfix_exp '--'
			;
primary_exp		: id
			| const
			| '(' exp ')'
			;
argument_exp_list	: assignment_exp
			| argument_exp_list ',' assignment_exp
			;
const			: int_const
			| char_const
			| real_const
			| string_const
			| enumeration_const
			;
