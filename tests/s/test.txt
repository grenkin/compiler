float x[101], y[101];
int num[101];
int m;
float X;

float LagrangePolynom(void) {
	float res, p;
	int j, k;
	res = 0;
	for (k = 0; k < m+1; k++) {
		p = y[num[k]];
		for (j = 0; j < m+1; j++) {
			if (j != k)
				p *= (X-x[num[j]])/(x[num[k]]-x[num[j]]);
		}
		res += p;
	}
	return res;
}

float divide_difference(int k) {
	float res, p;
	int i, j;
        res = 0;
	for (i = 0; i < k+1; i++) {
		p = y[num[i]];
		for (j = 0; j < k+1; j++) {
			if (j != i)
				p /= (x[num[i]] - x[num[j]]);
		}
		res += p;
	}
	return res;
}

float NewtonPolynom(void) {
	float res, p;
	int i, j;
	res = 0;
	for (i = 0; i < m+1; i++) {
		p = divide_difference(i);
		for (j = 0; j < i; j++)
			p *= (X-x[num[j]]);
		res += p;
	}
	return res;
}

float abs(float x) {
	if (x >= 0)
		return x;
	else
		return -x;
	return x >= 0 ? x : -x;
}

float eq(float a, float b) {
	return abs(a-b) < 1.0e-7;
}

void main(void) {
	int n;
	int v;
	float res, p1, p2;
	int i, j, tmp, rnum;

/*
1
0 0 1 1
1 5 0.5
*/
	n = 1;
	x[0] = 0; y[0] = 0;
	x[1] = 1; y[1] = 1;	
	m = 1; v = 5; X = 0.5;

	if (v == 1 || v == 2) {
		for (i = 0; i < n+1; i++)
			num[i] = i;
		for (i = 0; i < n+1; i++) {
			for (j = i+1; j < n+1; j++) {
				p1 = abs(x[num[i]]-X); p2 = abs(x[num[j]]-X);
				if (p1 > p2 || eq(p1, p2) && x[num[i]] < x[num[j]]) {
					tmp = num[i];
					num[i] = num[j];
					num[j] = tmp;
				}
			}
		}
	}
	else {
		rnum = 0;
		while (x[++rnum] < X);
		if (v == 3) {
			for (i = 0; i < m+1; i++)
				num[i] = rnum+i-1;
		}
		else if (v == 4) {
			for (i = 0; i < m+1; i++)
				num[i] = rnum-i;
		}
		else if (v == 5) {
			for (i = 0; i < m+1; i++)
				num[i] = i%2 ? rnum+i/2 : rnum-i/2-1;
		}
		else if (v == 6) {
			for (i = 0; i < m+1; i++)
				num[i] = i%2 ? rnum-i/2-1 : rnum+i/2;
		}
	}

	if (v == 1)
		res = LagrangePolynom();
        else
		res = NewtonPolynom();

	print_float(res);
}